# -*- coding: utf-8 -*-
"""Sustainable Smart City  Assistant .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1krNRW6IYdoTjr4fTklx6sn8xvDwOklhY
"""

!pip install transformers torch gradio PyPDF2 -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token


# Function: Generate response
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    if response.startswith(prompt):
        response = response[len(prompt):].strip()
    return response


# Function: Extract text from PDF
def extract_text_from_pdf(pdf_file):
    if pdf_file is None:
        return ""
    try:
        text = ""
        pdf_reader = PyPDF2.PdfReader(pdf_file.name)
        for page in pdf_reader.pages:
            extracted = page.extract_text()
            if extracted:
                text += extracted + "\n"
        return text.strip()
    except Exception as e:
        return f"‚ùå Error reading PDF: {str(e)}"


# Function: Eco tips generator
def eco_tips_generator(problem_keywords):
    prompt = f"Generate practical and actionable eco-friendly tips for sustainable living related to: {problem_keywords}. Provide specific solutions and suggestions."
    return generate_response(prompt, max_length=600)


# Function: Policy summarization
def policy_summarization(pdf_file, policy_text):
    if pdf_file is None and not policy_text.strip():
        return "‚ö†Ô∏è Please upload a PDF or enter policy text."

    if pdf_file:
        content = extract_text_from_pdf(pdf_file)
        summary_prompt = f"Summarize the following policy document and extract the most important points, key provisions, and implications:\n\n{content}"
    else:
        summary_prompt = f"Summarize the following policy document and extract the most important points, key provisions, and implications:\n\n{policy_text}"

    return generate_response(summary_prompt, max_length=1200)


# Build Gradio Interface
with gr.Blocks(theme=gr.themes.Soft(), css="""
    .gradio-container {background: #cce6ff;}   /* Light blue background */
    h1, h2, h3 {color: #034f84 !important; font-weight: bold;}
    .tabitem {background: #ffffffdd; border-radius: 18px; padding: 16px; box-shadow: 0 4px 12px rgba(0,0,0,0.1);}
    button {background: linear-gradient(90deg, #43cea2, #185a9d) !important;
            color: white !important; font-weight: bold; border-radius: 12px; padding: 10px 20px;}
    button:hover {background: linear-gradient(90deg, #56ab2f, #a8e063) !important;}
    textarea, input, .gr-textbox {border: 2px solid #034f84 !important;
            border-radius: 12px !important; padding: 10px; font-size: 15px;}
    .footer {text-align: center; margin-top: 20px; color: #034f84; font-size: 14px;}
""") as app:
    gr.Markdown(
        """
        # üå± Sustainable Smart City Assistant
        Welcome to your **AI-powered Green Dashboard** üåç‚ú®
        Get instant **eco-living tips** ‚ôªÔ∏è and **policy insights** üìú to support a sustainable future.
        ---
        """
    )

    with gr.Tab("üåç Eco Tips Generator"):
        gr.Markdown("### ‚ôªÔ∏è Get Practical, Everyday Green Solutions")
        with gr.Row():
            with gr.Column(scale=1):
                keywords_input = gr.Textbox(
                    label="üí° Environmental Issue / Keywords",
                    placeholder="E.g., Plastic, Solar Power, Water Waste, Energy Saving...",
                    lines=2,
                    info="Enter one or more issues you want eco-tips about"
                )
                generate_tips_btn = gr.Button("üåü Generate Eco Tips")
            with gr.Column(scale=2):
                tips_output = gr.Textbox(
                    label="üåø Sustainable Living Tips (AI Suggestions)",
                    lines=18,
                    interactive=False
                )
        generate_tips_btn.click(eco_tips_generator, inputs=keywords_input, outputs=tips_output)

    with gr.Tab("üìë Policy Summarization"):
        gr.Markdown("### üìú Summarize & Understand Policies")
        with gr.Row():
            with gr.Column(scale=1):
                pdf_upload = gr.File(
                    label="üìÇ Upload Policy PDF",
                    file_types=[".pdf"],

                )
                policy_text_input = gr.Textbox(
                    label="üìù Or Paste Policy Text",
                    placeholder="Paste or type the policy document text here...",
                    lines=10,
                    info="Either upload a PDF OR paste text"
                )
                summarize_btn = gr.Button("‚ö° Summarize Policy")
            with gr.Column(scale=2):
                summary_output = gr.Textbox(
                    label="üìå Policy Summary & Key Provisions",
                    lines=20,
                    interactive=False
                )
        summarize_btn.click(policy_summarization, inputs=[pdf_upload, policy_text_input], outputs=summary_output)

    gr.HTML("<div class='footer'>üåø Built with ‚ù§Ô∏è for a cleaner, greener tomorrow | Powered by AI ‚ö°</div>")

# Launch app
app.launch(share=True)